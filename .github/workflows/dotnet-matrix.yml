name: dotnet-matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: 1.0.0
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_MULTILEVEL_LOOKUP: false

jobs:
  # Quick syntax check
  quick-check:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.nuget }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "nuget=${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}" >> $GITHUB_OUTPUT
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Restore
      run: dotnet restore --verbosity minimal
      
    - name: Quick build check
      run: dotnet build --no-restore -c Release --verbosity minimal /p:TreatWarningsAsErrors=false

  # Parallel module builds
  build-test:
    needs: quick-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - group: Core
            projects: "System Validation Annotations Extensions Testing"
          - group: Infrastructure
            projects: "Cryptography Hosting Tools Domain Mvc"
          - group: Web
            projects: "Webserver Webmaster Detection Responsive"
          - group: Data
            projects: "EntityFramework Identity Security Federation"
          - group: UI
            projects: "Markdown Analytics Blazor Tabler"
          - group: Advanced
            projects: "Solver Microservice Nation"
    
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ needs.quick-check.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Build and test group
      run: |
        # Build and test each project in the group
        for PROJECT in ${{ matrix.projects }}; do
          echo "::group::Building $PROJECT"
          if [ -d "$PROJECT" ]; then
            # Build
            dotnet build "$PROJECT/src" -c Release --verbosity minimal || true
            
            # Test with coverage if tests exist
            if [ -d "$PROJECT/tests" ] && ls "$PROJECT/tests"/*.csproj 1> /dev/null 2>&1; then
              echo "Testing $PROJECT..."
              dotnet test "$PROJECT/tests" -c Release --no-build \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=json \
                /p:CoverletOutput=${{ github.workspace }}/coverage/${{ matrix.group }}- \
                --verbosity minimal || true
            fi
          fi
          echo "::endgroup::"
        done
        
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.group }}
        path: coverage/
        retention-days: 1

  # Merge coverage and run SonarCloud
  sonarcloud:
    needs: [quick-check, build-test]
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ needs.quick-check.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner
      
    - name: Download all coverage
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        path: coverage-parts/
        
    - name: Merge coverage files
      run: |
        mkdir -p coverage
        # Find all JSON coverage files
        find coverage-parts -name "*.json" -type f | while read file; do
          cp "$file" coverage/
        done
        
        # If we have coverage files, convert the last one to OpenCover
        if ls coverage/*.json 1> /dev/null 2>&1; then
          # Install ReportGenerator to merge and convert
          dotnet tool install --global dotnet-reportgenerator-globaltool
          
          # Merge all JSON files and output as OpenCover
          reportgenerator -reports:"coverage/*.json" -targetdir:coverage -reporttypes:OpenCover
          
          # Rename to expected filename
          mv coverage/OpenCover.xml coverage/coverage.opencover.xml || true
        fi
        
    - name: SonarCloud Scan
      run: |
        dotnet sonarscanner begin \
          /o:"wangkanai" \
          /k:"wangkanai_github" \
          /s:${{ github.workspace }}/SonarQube.Analysis.xml \
          /v:${{ env.VERSION }} \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.scanner.skipJreProvisioning=true \
          /d:sonar.scanner.scanAll=false \
          /d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml
          
        # Need to build for SonarCloud analysis
        dotnet build -c Release --verbosity minimal /p:TreatWarningsAsErrors=false
        
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Final status check
  status:
    needs: [build-test, sonarcloud]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check Status
      run: |
        if [ "${{ needs.build-test.result }}" == "success" ] && [ "${{ needs.sonarcloud.result }}" == "success" ]; then
          echo "✅ All checks passed!"
          exit 0
        else
          echo "❌ Some checks failed!"
          echo "Build/Test: ${{ needs.build-test.result }}"
          echo "SonarCloud: ${{ needs.sonarcloud.result }}"
          exit 1
        fi