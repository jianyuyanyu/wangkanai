name: dotnet

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: 1.0.0
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Quick build check without SonarCloud
  quick-check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-quick-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-quick-
          
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
          
    - name: Restore
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore -c Release
      
    - name: Quick Test
      run: dotnet test --no-build -c Release --verbosity minimal --filter "Category!=Integration&Category!=Slow"

  # Parallel module builds
  build-modules:
    needs: quick-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: 
          - { name: "Core", path: "System,Validation,Annotations,Extensions,Testing" }
          - { name: "Infrastructure", path: "Cryptography,Hosting,Tools,Domain,Mvc" }
          - { name: "Web", path: "Webserver,Webmaster,Detection,Responsive" }
          - { name: "Data", path: "EntityFramework,Identity,Security,Federation" }
          - { name: "UI", path: "Markdown,Analytics,Blazor,Tabler" }
          - { name: "Advanced", path: "Solver,Microservice,Nation" }
    
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ matrix.module.name }}-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ matrix.module.name }}-
          
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
          
    - name: Build and Test Module Group
      run: |
        IFS=',' read -ra MODULES <<< "${{ matrix.module.path }}"
        for module in "${MODULES[@]}"; do
          echo "Building $module..."
          if [ -d "$module" ]; then
            cd "$module"
            if [ -f "build.ps1" ]; then
              pwsh ./build.ps1
            else
              # Fallback if no build script
              [ -d "src" ] && dotnet build ./src -c Release
              [ -d "tests" ] && dotnet test ./tests -c Release --no-build
            fi
            cd ..
          fi
        done

  # SonarCloud analysis (separate job)
  sonarcloud:
    needs: quick-check
    runs-on: ubuntu-latest
    
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      DOTNET_ROOT: ${{ github.workspace }}/dotnet
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-sonar-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-sonar-

    - name: Cache .NET tools
      uses: actions/cache@v4
      with:
        path: ~/.dotnet/tools
        key: ${{ runner.os }}-dotnet-tools-sonar
        restore-keys: |
          ${{ runner.os }}-dotnet-tools-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud Begin
      run: >
        dotnet sonarscanner begin
        /o:"wangkanai"
        /k:"wangkanai_github"
        /s:${{ github.workspace }}/SonarQube.Analysis.xml
        /v:${{ env.VERSION }}
        /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /d:sonar.scanner.skipJreProvisioning=true
        /d:sonar.scanner.scanAll=false
        /d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore -c Release

    - name: Test with Coverage
      run: |
        mkdir -p coverage
        
        # Use built-in coverage collection for better performance
        dotnet test -c Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger "console;verbosity=minimal" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        
        # Move coverage file to expected location
        find ./coverage -name "coverage.opencover.xml" -exec mv {} ./coverage/coverage.opencover.xml \; 2>/dev/null || true

    - name: SonarCloud End
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Final status check
  status:
    needs: [build-modules, sonarcloud]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check Status
      run: |
        if [ "${{ needs.build-modules.result }}" == "success" ] && [ "${{ needs.sonarcloud.result }}" == "success" ]; then
          echo "✅ All checks passed!"
          exit 0
        else
          echo "❌ Some checks failed!"
          exit 1
        fi