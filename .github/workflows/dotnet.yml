name: dotnet

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: 1.0.0
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_MULTILEVEL_LOOKUP: false
  # Skip certain projects on PRs for faster builds
  SKIP_SLOW_PROJECTS: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}

jobs:
  build:
    runs-on: ubuntu-latest # [self-hosted, linux, x64]

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      DOTNET_ROOT: ${{ github.workspace }}/dotnet

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache .NET installation to save setup time
    - name: Cache .NET SDK
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.DOTNET_ROOT }}
          ~/.dotnet
          /usr/share/dotnet
        key: ${{ runner.os }}-dotnet-sdk-9.0-${{ hashFiles('.github/workflows/dotnet.yml') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-sdk-9.0-
          ${{ runner.os }}-dotnet-sdk-

    # Cache NuGet packages to avoid re-downloading
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Cache global tools
    - name: Cache .NET tools
      uses: actions/cache@v4
      with:
        path: ~/.dotnet/tools
        key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('.config/dotnet-tools.json') }}-v3
        restore-keys: |
          ${{ runner.os }}-dotnet-tools-

    # Cache build outputs for faster incremental builds
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          **/bin/Release
          **/obj/Release
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

    # Cache npm dependencies for Tabler project
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    # Cache SonarCloud scanner and analysis data
    - name: Cache SonarCloud
      uses: actions/cache@v4
      with:
        path: |
          ~/.sonar/cache
          .sonarqube
        key: ${{ runner.os }}-sonar-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-sonar-

    - name: Setup .NET 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Setup Node.js for npm builds
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'Tabler/src/Web/package-lock.json'

    # Install tools faster with parallel execution
    - name: Install tools
      run: |
        # Install all tools without checking - let cache handle duplicates
        echo "Installing tools in parallel..."
        (
          dotnet tool install --global dotnet-sonarscanner 2>/dev/null || echo "SonarScanner already installed"
        ) &
        (
          dotnet tool install --global dotnet-reportgenerator-globaltool 2>/dev/null || echo "ReportGenerator already installed"
        ) &
        wait
        
        # Verify installations
        dotnet tool list --global
      shell: bash

    - name: SonarCloud Scanner Begin
      run: >
        dotnet sonarscanner begin
        /o:"wangkanai"
        /k:"wangkanai_github"
        /s:${{ github.workspace }}/SonarQube.Analysis.xml
        /v:${{ env.VERSION }}
        /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /d:sonar.scanner.skipJreProvisioning=true
        /d:sonar.scanner.scanAll=false
        /d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml
        /d:sonar.verbose=false
        /d:sonar.scm.disabled=true
        /d:sonar.dotnet.excludeTestProjects=true

    - name: Restore dependencies
      run: |
        # Ultra-fast restore with no-dependencies check
        dotnet restore --verbosity minimal --no-dependencies
      shell: bash

    # Pre-install npm dependencies to avoid build failures
    - name: Install npm dependencies
      run: |
        if [ -f "Tabler/src/Web/package.json" ]; then
          echo "Installing npm dependencies for Tabler..."
          cd Tabler/src/Web
          npm ci --prefer-offline --no-audit --no-fund || npm install --no-audit --no-fund
          # Create stamp file to prevent re-installation during build
          touch node_modules/.install-stamp
          cd ../../..
        fi
      shell: bash

    - name: Build
      run: |
        # Ultra-aggressive parallel build
        dotnet build --no-restore -c Release \
          /p:TreatWarningsAsErrors=false \
          /p:ContinuousIntegrationBuild=true \
          /maxcpucount \
          /p:UseSharedCompilation=true \
          /p:BuildInParallel=true \
          /p:PublishReadyToRun=false \
          /p:PublishTrimmed=false \
          /p:EnableNETAnalyzers=false \
          /p:RunAnalyzersDuringBuild=false \
          /p:UseCommonOutputDirectory=true \
          --verbosity minimal

    # Run tests with built-in coverage collector (more reliable)
    - name: Test with Coverage
      run: |
        # Create coverage directory
        mkdir -p ${{ github.workspace }}/coverage

        # Run all tests with built-in coverage collector
        echo "Running tests with coverage..."
        dotnet test --no-build -c Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ${{ github.workspace }}/coverage \
          --logger "console;verbosity=minimal" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

        # Find and consolidate coverage files
        echo "Processing coverage files..."
        find ${{ github.workspace }}/coverage -name "coverage.opencover.xml" -type f | head -1 | xargs -I {} cp {} ${{ github.workspace }}/coverage/coverage.opencover.xml || true
        
        # Verify coverage was generated
        if [ -f "${{ github.workspace }}/coverage/coverage.opencover.xml" ]; then
          echo "✅ Coverage report generated successfully"
          ls -la ${{ github.workspace }}/coverage/
        else
          echo "⚠️ Coverage report not found, checking for Coverlet fallback..."
          
          # Fallback to Coverlet if XPlat fails
          TEST_PROJECTS=$(find . -name "*.Tests.csproj" -type f -not -path "*/bin/*" -not -path "*/obj/*" | head -5)
          for PROJECT in $TEST_PROJECTS; do
            echo "Trying Coverlet on $PROJECT..."
            dotnet test "$PROJECT" --no-build -c Release \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=opencover \
              /p:CoverletOutput=${{ github.workspace }}/coverage/ \
              --verbosity minimal || true
            
            if [ -f "${{ github.workspace }}/coverage/coverage.opencover.xml" ]; then
              echo "✅ Coverage generated with Coverlet"
              break
            fi
          done
        fi

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 1

    - name: SonarCloud Submit
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
