name: dotnet

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: 1.0.0

jobs:
  build:

    runs-on: ubuntu-latest # [self-hosted, linux, x64]

    env:
        NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
        DOTNET_ROOT: ${{ github.workspace }}/dotnet  # Define a writable directory for .NET
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup .NET 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Setup SonarCloud
      run:  dotnet tool install --global dotnet-sonarscanner

    - name: Setup ReportGenerator
      run:  dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Install npm
      run:  |
        npm install -g rimraf
      shell: bash

    - name: SonarCloud Scanner
      run:  >
        dotnet sonarscanner begin
        /o:"wangkanai"
        /k:"wangkanai_github"
        /s:${{ github.workspace }}/SonarQube.Analysis.xml
        /v:${{ env.VERSION }}
        /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /d:sonar.scanner.skipJreProvisioning=true
        /d:sonar.scanner.scanAll=false
        /d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml

    - name: Restore dependencies
      run:  dotnet restore

    - name: Build
      run:  dotnet build --no-restore --no-incremental

    - name: Test
      run:  dotnet test --no-build --verbosity normal
      
    - name: Test with Coverage
      run:  |
        # Run tests with coverage collection for each project
        # First, get a single test project to generate the initial coverage
        FIRST_PROJECT=$(find . -name "*.Tests.csproj" -type f -not -path "*/bin/*" -not -path "*/obj/*" | head -1)
        
        if [ -n "$FIRST_PROJECT" ]; then
          echo "Generating coverage starting with: $FIRST_PROJECT"
          dotnet test "$FIRST_PROJECT" --no-build \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=${{ github.workspace }}/coverage/
        fi
        
        # Verify coverage was generated
        if [ -f "coverage/coverage.opencover.xml" ]; then
          echo "Coverage report generated successfully"
          ls -la coverage/
        else
          echo "WARNING: Coverage generation failed. Trying alternative approach..."
          # Try with a specific known project
          dotnet test ./Annotations/tests/Wangkanai.Annotations.Tests.csproj --no-build \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=${{ github.workspace }}/coverage/ || true
          ls -la coverage/ || echo "No coverage directory"
        fi

    - name: Debug Coverage Files
      run:  |
        echo "=== Coverage directory contents ==="
        find . -name "coverage.opencover.xml" -type f | head -20
        find . -name "coverage.json" -type f | head -20
        echo "=== Root coverage directory ==="
        ls -la coverage/ || echo "No coverage directory"
        echo "=== Working directory ==="
        pwd
        echo "=== GitHub workspace ==="
        echo ${{ github.workspace }}
        
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage/
          **/coverage/
        retention-days: 1
        
    - name: SonarCloud Submit
      run:  dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
