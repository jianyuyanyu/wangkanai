name: dotnet

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: 1.0.0
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  DOTNET_MULTILEVEL_LOOKUP: false

jobs:
  build:
    runs-on: ubuntu-latest # [self-hosted, linux, x64]

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      DOTNET_ROOT: ${{ github.workspace }}/dotnet

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache .NET installation to save setup time
    - name: Cache .NET SDK
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.DOTNET_ROOT }}
          ~/.dotnet
          /usr/share/dotnet
        key: ${{ runner.os }}-dotnet-sdk-8.0-9.0-${{ hashFiles('.github/workflows/dotnet.yml') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-sdk-8.0-9.0-
          ${{ runner.os }}-dotnet-sdk-

    # Cache NuGet packages to avoid re-downloading
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Cache global tools
    - name: Cache .NET tools
      uses: actions/cache@v4
      with:
        path: ~/.dotnet/tools
        key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('.config/dotnet-tools.json') }}-v3
        restore-keys: |
          ${{ runner.os }}-dotnet-tools-

    # Cache build outputs for faster incremental builds
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          **/bin/Release
          **/obj/Release
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Setup .NET 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Install tools with proper checking
    - name: Install tools
      run: |
        # Check and install .NET tools using dotnet tool list
        if ! dotnet tool list --global | grep -q "dotnet-sonarscanner"; then
          echo "Installing dotnet-sonarscanner..."
          dotnet tool install --global dotnet-sonarscanner
        else
          echo "dotnet-sonarscanner already installed"
        fi

        if ! dotnet tool list --global | grep -q "dotnet-reportgenerator-globaltool"; then
          echo "Installing reportgenerator..."
          dotnet tool install --global dotnet-reportgenerator-globaltool
        else
          echo "reportgenerator already installed"
        fi

        # Check and install npm tools
        if ! command -v rimraf &> /dev/null; then
          echo "Installing rimraf..."
          npm install -g rimraf
        else
          echo "rimraf already installed"
        fi
      shell: bash

    - name: SonarCloud Scanner Begin
      run: >
        dotnet sonarscanner begin
        /o:"wangkanai"
        /k:"wangkanai_github"
        /s:${{ github.workspace }}/SonarQube.Analysis.xml
        /v:${{ env.VERSION }}
        /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /d:sonar.scanner.skipJreProvisioning=true
        /d:sonar.scanner.scanAll=false
        /d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml

    - name: Restore dependencies
      run: |
        set -e
        # Try fast restore with minimal verbosity
        dotnet restore --verbosity minimal --use-lock-file --locked-mode || dotnet restore --verbosity minimal
      shell: bash

    - name: Build
      run: |
        # Ultra-aggressive parallel build
        dotnet build --no-restore -c Release \
          /p:TreatWarningsAsErrors=false \
          /p:ContinuousIntegrationBuild=true \
          /maxcpucount \
          /p:UseSharedCompilation=true \
          /p:BuildInParallel=true \
          /p:PublishReadyToRun=false \
          /p:PublishTrimmed=false \
          /p:EnableNETAnalyzers=false \
          /p:RunAnalyzersDuringBuild=false \
          /p:UseCommonOutputDirectory=true \
          --verbosity minimal

    # Run tests with parallel execution but sequential coverage (iteration 3)
    - name: Test with Coverage
      run: |
        # Create coverage directory
        mkdir -p ${{ github.workspace }}/coverage

        # First run tests quickly without coverage to catch failures
        echo "Running tests without coverage for quick feedback..."
        dotnet test --no-build -c Release --verbosity minimal || exit 1

        # Then run with coverage collection
        echo "Running tests with coverage collection..."
        TEST_PROJECTS=$(find . -name "*.Tests.csproj" -type f -not -path "*/bin/*" -not -path "*/obj/*" | sort)
        TOTAL_PROJECTS=$(echo "$TEST_PROJECTS" | wc -l)
        CURRENT=0

        for PROJECT in $TEST_PROJECTS; do
          CURRENT=$((CURRENT + 1))
          echo "Coverage for $PROJECT ($CURRENT/$TOTAL_PROJECTS)"
          
          if [ $CURRENT -eq $TOTAL_PROJECTS ]; then
            # Last project - generate final coverage
            if [ $TOTAL_PROJECTS -gt 1 ] && [ -f "${{ github.workspace }}/coverage/coverage.json" ]; then
              dotnet test "$PROJECT" --no-build -c Release \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=opencover \
                /p:CoverletOutput=${{ github.workspace }}/coverage/ \
                /p:MergeWith=${{ github.workspace }}/coverage/coverage.json \
                --verbosity quiet || true
            else
              dotnet test "$PROJECT" --no-build -c Release \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=opencover \
                /p:CoverletOutput=${{ github.workspace }}/coverage/ \
                --verbosity quiet || true
            fi
          else
            # Intermediate projects
            dotnet test "$PROJECT" --no-build -c Release \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=json \
              /p:CoverletOutput=${{ github.workspace }}/coverage/ \
              $([ $CURRENT -gt 1 ] && [ -f "${{ github.workspace }}/coverage/coverage.json" ] && echo "/p:MergeWith=${{ github.workspace }}/coverage/coverage.json") \
              --verbosity quiet || true
          fi
        done

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 1

    - name: SonarCloud Submit
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
