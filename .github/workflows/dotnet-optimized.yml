name: dotnet

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  VERSION: 1.0.0
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      DOTNET_ROOT: ${{ github.workspace }}/dotnet
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache .NET installation
    - name: Cache .NET
      uses: actions/cache@v4
      with:
        path: ${{ env.DOTNET_ROOT }}
        key: ${{ runner.os }}-dotnet-8.0-9.0-${{ hashFiles('**/global.json') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-8.0-9.0-
          ${{ runner.os }}-dotnet-

    # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Cache build output
    - name: Cache build output
      uses: actions/cache@v4
      with:
        path: |
          **/bin
          **/obj
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

    # Cache global tools
    - name: Cache .NET tools
      uses: actions/cache@v4
      with:
        path: ~/.dotnet/tools
        key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('.config/dotnet-tools.json') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-tools-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    # Install tools in parallel
    - name: Install tools
      run: |
        # Install tools in parallel
        dotnet tool install --global dotnet-sonarscanner &
        dotnet tool install --global dotnet-reportgenerator-globaltool &
        npm install -g rimraf &
        wait

    - name: SonarCloud Scanner Begin
      run: >
        dotnet sonarscanner begin
        /o:"wangkanai"
        /k:"wangkanai_github"
        /s:${{ github.workspace }}/SonarQube.Analysis.xml
        /v:${{ env.VERSION }}
        /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /d:sonar.scanner.skipJreProvisioning=true
        /d:sonar.scanner.scanAll=false
        /d:sonar.cs.opencover.reportsPaths=coverage/coverage.opencover.xml

    - name: Restore dependencies
      run: dotnet restore --use-lock-file --locked-mode || dotnet restore

    - name: Build
      run: dotnet build --no-restore -c Release --no-incremental /p:TreatWarningsAsErrors=false

    # Run tests in parallel with coverage
    - name: Test with Coverage
      run: |
        mkdir -p ${{ github.workspace }}/coverage
        
        # Find all test projects
        TEST_PROJECTS=$(find . -name "*.Tests.csproj" -type f -not -path "*/bin/*" -not -path "*/obj/*" | sort)
        TOTAL_PROJECTS=$(echo "$TEST_PROJECTS" | wc -l)
        
        echo "Found $TOTAL_PROJECTS test projects"
        
        # Run all tests in parallel first (fast feedback)
        echo "Running all tests in parallel for fast feedback..."
        dotnet test --no-build -c Release --verbosity minimal --logger "console;verbosity=minimal" || true
        
        # Now run with coverage collection
        echo "Running tests with coverage collection..."
        CURRENT=0
        
        for PROJECT in $TEST_PROJECTS; do
          CURRENT=$((CURRENT + 1))
          echo "Collecting coverage for $PROJECT ($CURRENT/$TOTAL_PROJECTS)"
          
          if [ $CURRENT -eq $TOTAL_PROJECTS ]; then
            # Last project - generate final merged coverage
            if [ $TOTAL_PROJECTS -gt 1 ]; then
              dotnet test "$PROJECT" --no-build -c Release \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=opencover \
                /p:CoverletOutput=${{ github.workspace }}/coverage/ \
                /p:MergeWith=${{ github.workspace }}/coverage/coverage.json \
                --logger "console;verbosity=minimal" || true
            else
              dotnet test "$PROJECT" --no-build -c Release \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=opencover \
                /p:CoverletOutput=${{ github.workspace }}/coverage/ \
                --logger "console;verbosity=minimal" || true
            fi
          else
            # Intermediate projects
            if [ $CURRENT -eq 1 ]; then
              dotnet test "$PROJECT" --no-build -c Release \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=json \
                /p:CoverletOutput=${{ github.workspace }}/coverage/ \
                --logger "console;verbosity=minimal" || true
            else
              dotnet test "$PROJECT" --no-build -c Release \
                /p:CollectCoverage=true \
                /p:CoverletOutputFormat=json \
                /p:CoverletOutput=${{ github.workspace }}/coverage/ \
                /p:MergeWith=${{ github.workspace }}/coverage/coverage.json \
                --logger "console;verbosity=minimal" || true
            fi
          fi
        done

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 1
        
    - name: SonarCloud Submit
      run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"