@* Copyright (c) 2014-2025 Sarin Na Wangkanai, All Rights Reserved. *@
@namespace Wangkanai.Tabler.Components
@inherits ComponentBase
@using Wangkanai.Tabler.Models

<div class="@PageCssClass" @attributes="AdditionalAttributes">
    @if (HeaderContent != null)
    {
        <header class="@GetHeaderClass()">
            @HeaderContent
        </header>
    }

    <main class="@GetMainClass()">
        @if (Layout != PageLayout.Centered && Layout != PageLayout.Minimal)
        {
            <TablerContainer Type="@(Fluid ? ContainerType.Fluid : ContainerType.Default)" AdditionalCssClass="@GetContainerClass()">
                @ChildContent
            </TablerContainer>
        }
        else
        {
            @ChildContent
        }
    </main>

    @if (FooterContent != null)
    {
        <footer class="@GetFooterClass()">
            @FooterContent
        </footer>
    }
</div>

@code {
    /// <summary>
    /// The main content to be rendered in the page body.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Optional header content to be rendered at the top of the page.
    /// </summary>
    [Parameter] public RenderFragment? HeaderContent { get; set; }

    /// <summary>
    /// Optional footer content to be rendered at the bottom of the page.
    /// </summary>
    [Parameter] public RenderFragment? FooterContent { get; set; }

    /// <summary>
    /// Additional HTML attributes to be applied to the page wrapper element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// The layout pattern to use for the page structure.
    /// </summary>
    [Parameter] public PageLayout Layout { get; set; } = PageLayout.Default;

    /// <summary>
    /// Whether to use a fluid container that spans the full width.
    /// Only applies to Default and FullHeight layouts.
    /// </summary>
    [Parameter] public bool Fluid { get; set; }

    /// <summary>
    /// Additional CSS classes to apply to the page wrapper.
    /// </summary>
    [Parameter] public string? AdditionalCssClass { get; set; }

    /// <summary>
    /// Gets the computed CSS class string for the page wrapper.
    /// </summary>
    private string PageCssClass
    {
        get
        {
            var classes = new List<string> { GetPageClass() };

            // Add layout-specific classes
            if (Layout == PageLayout.FullHeight)
            {
                classes.Add("d-flex");
                classes.Add("flex-column");
            }

            if (!string.IsNullOrWhiteSpace(AdditionalCssClass))
            {
                foreach (var cssClass in AdditionalCssClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                {
                    classes.Add(cssClass);
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the base page CSS class based on the layout type.
    /// </summary>
    private string GetPageClass() => Layout switch
    {
        PageLayout.Centered => "page page-center",
        PageLayout.Minimal => "page-minimal",
        _ => "page-wrapper" // Default and FullHeight use page-wrapper
    };

    /// <summary>
    /// Gets the header CSS class.
    /// </summary>
    private string GetHeaderClass() => Layout switch
    {
        PageLayout.Minimal => "page-header-minimal",
        _ => "page-header"
    };

    /// <summary>
    /// Gets the main content CSS class based on layout.
    /// </summary>
    private string GetMainClass() => Layout switch
    {
        PageLayout.Centered => "page-center",
        PageLayout.FullHeight => "page-body flex-fill",
        PageLayout.Minimal => "page-body-minimal",
        _ => "page-body"
    };

    /// <summary>
    /// Gets additional container CSS classes for special layouts.
    /// </summary>
    private string? GetContainerClass() => Layout switch
    {
        PageLayout.FullHeight => "h-100",
        _ => null
    };

    /// <summary>
    /// Gets the footer CSS class.
    /// </summary>
    private string GetFooterClass() => Layout switch
    {
        PageLayout.Minimal => "page-footer-minimal",
        _ => "page-footer"
    };
}