@* Copyright (c) 2014-2025 Sarin Na Wangkanai, All Rights Reserved. *@
@namespace Wangkanai.Tabler.Components
@inherits ComponentBase

<form class="@CssClass" @onsubmit="HandleSubmit" @onsubmit:preventDefault="PreventDefaultSubmit" @attributes="AdditionalAttributes">
    @ChildContent
</form>

@code {
    /// <summary>
    /// The content to be rendered inside the form.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Additional HTML attributes to be applied to the form element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Event callback fired when the form is submitted.
    /// </summary>
    [Parameter] public EventCallback OnSubmit { get; set; }

    /// <summary>
    /// Event callback fired when the form is submitted with the form data.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnValidSubmit { get; set; }

    /// <summary>
    /// Event callback fired when the form submission fails validation.
    /// </summary>
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    /// <summary>
    /// The EditContext for form validation.
    /// </summary>
    [Parameter] public EditContext? EditContext { get; set; }

    /// <summary>
    /// Whether to prevent the default form submission behavior.
    /// Default is true to handle submission via Blazor events.
    /// </summary>
    [Parameter] public bool PreventDefaultSubmit { get; set; } = true;

    /// <summary>
    /// Additional CSS classes to apply to the form.
    /// </summary>
    [Parameter] public string? AdditionalCssClass { get; set; }

    /// <summary>
    /// Whether to display validation summary at the form level.
    /// </summary>
    [Parameter] public bool ShowValidationSummary { get; set; }

    /// <summary>
    /// Whether the form is currently being submitted.
    /// Can be used to disable submit buttons or show loading states.
    /// </summary>
    [Parameter] public bool IsSubmitting { get; set; }

    /// <summary>
    /// Gets the computed CSS class string for the form.
    /// </summary>
    private string CssClass
    {
        get
        {
            var classes = new List<string>();

            if (IsSubmitting)
                classes.Add("form-submitting");

            if (!string.IsNullOrWhiteSpace(AdditionalCssClass))
            {
                foreach (var cssClass in AdditionalCssClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                {
                    classes.Add(cssClass);
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Handles form submission with validation support.
    /// </summary>
    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync();
            return;
        }

        if (EditContext != null)
        {
            var isValid = EditContext.Validate();

            if (isValid && OnValidSubmit.HasDelegate)
            {
                await OnValidSubmit.InvokeAsync(EditContext);
            }
            else if (!isValid && OnInvalidSubmit.HasDelegate)
            {
                await OnInvalidSubmit.InvokeAsync(EditContext);
            }
        }
    }
}