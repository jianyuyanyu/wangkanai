@* Copyright (c) 2014-2025 Sarin Na Wangkanai, All Rights Reserved. *@
@namespace Wangkanai.Tabler.Components
@inherits ComponentBase
@using Wangkanai.Tabler.Models
@using Microsoft.AspNetCore.Components.Web

<div class="@WrapperCssClass">
    @if (PrefixIcon != null || !string.IsNullOrEmpty(PrefixText))
    {
        <span class="input-group-text">
            @if (PrefixIcon != null)
            {
                @PrefixIcon
            }
            else if (!string.IsNullOrEmpty(PrefixText))
            {
                @PrefixText
            }
        </span>
    }

    <input @attributes="AllAttributes" 
           class="@InputCssClass" 
           type="@CurrentInputType"
           value="@CurrentValue"
           placeholder="@Placeholder"
           disabled="@Disabled"
           readonly="@ReadOnly"
           autocomplete="@AutoComplete"
           @oninput="HandleInput"
           @onchange="HandleChange"
           @onfocus="HandleFocus"
           @onblur="HandleBlur" />

    @if (ShowToggleVisibility)
    {
        <button type="button" 
                class="input-group-text btn btn-link p-0 border-0" 
                style="background: transparent;"
                @onclick="TogglePasswordVisibility"
                tabindex="-1"
                aria-label="@ToggleAriaLabel">
            @if (IsPasswordVisible)
            {
                <!-- Eye Off Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="20" height="20" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <line x1="3" y1="3" x2="21" y2="21" />
                    <path d="M10.584 10.587a2 2 0 0 0 2.828 2.83" />
                    <path d="M9.363 5.365a9.466 9.466 0 0 1 2.637 -.365c4 0 7.333 2.333 10 7c-.778 1.361 -1.612 2.524 -2.503 3.488m-2.14 1.861c-1.631 1.1 -3.415 1.651 -5.357 1.651c-4 0 -7.33 -2.333 -10 -7c1.369 -2.395 2.913 -4.175 4.632 -5.341" />
                </svg>
            }
            else
            {
                <!-- Eye Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="20" height="20" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <circle cx="12" cy="12" r="2" />
                    <path d="M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7" />
                </svg>
            }
        </button>
    }
    
    @if (SuffixIcon != null || !string.IsNullOrEmpty(SuffixText))
    {
        <span class="input-group-text">
            @if (SuffixIcon != null)
            {
                @SuffixIcon
            }
            else if (!string.IsNullOrEmpty(SuffixText))
            {
                @SuffixText
            }
        </span>
    }
</div>

@if (ShowStrengthIndicator && !string.IsNullOrEmpty(CurrentValue))
{
    <div class="mt-2">
        <div class="progress" style="height: 4px;">
            <div class="progress-bar @StrengthCssClass" 
                 role="progressbar" 
                 style="width: @StrengthPercentage%"
                 aria-valuenow="@StrengthScore" 
                 aria-valuemin="0" 
                 aria-valuemax="4"
                 aria-label="Password strength: @StrengthText">
            </div>
        </div>
        <small class="@StrengthTextCssClass mt-1 d-block">
            @StrengthText
        </small>
    </div>
}

@if (!string.IsNullOrEmpty(HelpText) || ValidationState != InputValidationState.None)
{
    <div class="@FeedbackCssClass">
        @if (ValidationState == InputValidationState.Invalid && !string.IsNullOrEmpty(ErrorMessage))
        {
            @ErrorMessage
        }
        else if (ValidationState == InputValidationState.Valid && !string.IsNullOrEmpty(SuccessMessage))
        {
            @SuccessMessage
        }
        else if (ValidationState == InputValidationState.Warning && !string.IsNullOrEmpty(WarningMessage))
        {
            @WarningMessage
        }
        else if (!string.IsNullOrEmpty(HelpText))
        {
            @HelpText
        }
    </div>
}

@code {
    /// <summary>
    /// The current value of the password input.
    /// </summary>
    [Parameter] public string? Value { get; set; }

    /// <summary>
    /// Event callback fired when the password value changes.
    /// </summary>
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    /// Additional HTML attributes to be applied to the input element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Placeholder text to display when the input is empty.
    /// </summary>
    [Parameter] public string? Placeholder { get; set; } = "Enter password";

    /// <summary>
    /// Whether the input is disabled.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    /// <summary>
    /// Whether the input is read-only.
    /// </summary>
    [Parameter] public bool ReadOnly { get; set; }

    /// <summary>
    /// The size of the input control.
    /// </summary>
    [Parameter] public InputSize Size { get; set; } = InputSize.Default;

    /// <summary>
    /// The validation state of the input.
    /// </summary>
    [Parameter] public InputValidationState ValidationState { get; set; } = InputValidationState.None;

    /// <summary>
    /// Help text to display below the input.
    /// </summary>
    [Parameter] public string? HelpText { get; set; }

    /// <summary>
    /// Error message to display when ValidationState is Invalid.
    /// </summary>
    [Parameter] public string? ErrorMessage { get; set; }

    /// <summary>
    /// Success message to display when ValidationState is Valid.
    /// </summary>
    [Parameter] public string? SuccessMessage { get; set; }

    /// <summary>
    /// Warning message to display when ValidationState is Warning.
    /// </summary>
    [Parameter] public string? WarningMessage { get; set; }

    /// <summary>
    /// Prefix icon content to display before the input.
    /// </summary>
    [Parameter] public RenderFragment? PrefixIcon { get; set; }

    /// <summary>
    /// Prefix text to display before the input.
    /// </summary>
    [Parameter] public string? PrefixText { get; set; }

    /// <summary>
    /// Suffix icon content to display after the input (appears before toggle button).
    /// </summary>
    [Parameter] public RenderFragment? SuffixIcon { get; set; }

    /// <summary>
    /// Suffix text to display after the input (appears before toggle button).
    /// </summary>
    [Parameter] public string? SuffixText { get; set; }

    /// <summary>
    /// Whether to show the password visibility toggle button.
    /// </summary>
    [Parameter] public bool ShowToggleVisibility { get; set; } = true;

    /// <summary>
    /// Whether to show the password strength indicator.
    /// </summary>
    [Parameter] public bool ShowStrengthIndicator { get; set; } = true;

    /// <summary>
    /// The autocomplete attribute value for the password input.
    /// </summary>
    [Parameter] public string AutoComplete { get; set; } = "current-password";

    /// <summary>
    /// Event callback fired when the input receives focus.
    /// </summary>
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }

    /// <summary>
    /// Event callback fired when the input loses focus.
    /// </summary>
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    /// <summary>
    /// Event callback fired when password visibility is toggled.
    /// </summary>
    [Parameter] public EventCallback<bool> OnVisibilityToggled { get; set; }

    /// <summary>
    /// Additional CSS classes to apply to the input wrapper.
    /// </summary>
    [Parameter] public string? AdditionalCssClass { get; set; }

    private bool IsPasswordVisible { get; set; } = false;

    /// <summary>
    /// Gets or sets the current password value.
    /// </summary>
    protected string? CurrentValue
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                _ = ValueChanged.InvokeAsync(value);
            }
        }
    }

    /// <summary>
    /// Gets the current input type based on visibility state.
    /// </summary>
    private string CurrentInputType => IsPasswordVisible ? "text" : "password";

    /// <summary>
    /// Gets the aria label for the toggle button.
    /// </summary>
    private string ToggleAriaLabel => IsPasswordVisible ? "Hide password" : "Show password";

    /// <summary>
    /// Gets the password strength score (0-4).
    /// </summary>
    private int StrengthScore
    {
        get
        {
            if (string.IsNullOrEmpty(CurrentValue))
                return 0;

            var score = 0;
            var password = CurrentValue;

            // Length criteria
            if (password.Length >= 8) score++;
            if (password.Length >= 12) score++;

            // Character type criteria
            if (password.Any(char.IsLower)) score++;
            if (password.Any(char.IsUpper)) score++;
            if (password.Any(char.IsDigit)) score++;
            if (password.Any(c => !char.IsLetterOrDigit(c))) score++;

            // Cap at 4
            return Math.Min(score, 4);
        }
    }

    /// <summary>
    /// Gets the password strength percentage for the progress bar.
    /// </summary>
    private int StrengthPercentage => StrengthScore * 25;

    /// <summary>
    /// Gets the CSS class for the strength progress bar.
    /// </summary>
    private string StrengthCssClass => StrengthScore switch
    {
        0 => "bg-danger",
        1 => "bg-danger",
        2 => "bg-warning",
        3 => "bg-primary",
        4 => "bg-success",
        _ => "bg-danger"
    };

    /// <summary>
    /// Gets the CSS class for the strength text.
    /// </summary>
    private string StrengthTextCssClass => StrengthScore switch
    {
        0 => "text-danger",
        1 => "text-danger", 
        2 => "text-warning",
        3 => "text-primary",
        4 => "text-success",
        _ => "text-muted"
    };

    /// <summary>
    /// Gets the password strength text description.
    /// </summary>
    private string StrengthText => StrengthScore switch
    {
        0 => "Very weak",
        1 => "Weak",
        2 => "Fair",
        3 => "Good",
        4 => "Strong",
        _ => ""
    };

    /// <summary>
    /// Gets the attributes to apply to the input element, excluding class.
    /// </summary>
    private Dictionary<string, object> AllAttributes
    {
        get
        {
            var attributes = new Dictionary<string, object>();

            if (AdditionalAttributes != null)
            {
                foreach (var attr in AdditionalAttributes.Where(a => a.Key != "class"))
                {
                    attributes[attr.Key] = attr.Value;
                }
            }

            return attributes;
        }
    }

    /// <summary>
    /// Gets the CSS class for the input wrapper.
    /// </summary>
    private string WrapperCssClass
    {
        get
        {
            var classes = new List<string>();

            if (HasPrefixOrSuffix || ShowToggleVisibility)
                classes.Add("input-group");

            if (!string.IsNullOrWhiteSpace(AdditionalCssClass))
            {
                foreach (var cssClass in AdditionalCssClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                {
                    classes.Add(cssClass);
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the input element.
    /// </summary>
    private string InputCssClass
    {
        get
        {
            var classes = new List<string> { "form-control" };

            // Size classes
            switch (Size)
            {
                case InputSize.Small:
                    classes.Add("form-control-sm");
                    break;
                case InputSize.Large:
                    classes.Add("form-control-lg");
                    break;
            }

            // Validation state classes
            switch (ValidationState)
            {
                case InputValidationState.Valid:
                    classes.Add("is-valid");
                    break;
                case InputValidationState.Invalid:
                    classes.Add("is-invalid");
                    break;
                case InputValidationState.Warning:
                    classes.Add("is-warning");
                    break;
            }

            // Add any additional classes from AdditionalAttributes
            if (AdditionalAttributes?.ContainsKey("class") == true)
            {
                var additionalClass = AdditionalAttributes["class"]?.ToString();
                if (!string.IsNullOrWhiteSpace(additionalClass))
                {
                    foreach (var cssClass in additionalClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                    {
                        classes.Add(cssClass);
                    }
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the feedback message.
    /// </summary>
    private string FeedbackCssClass => ValidationState switch
    {
        InputValidationState.Valid => "valid-feedback",
        InputValidationState.Invalid => "invalid-feedback", 
        InputValidationState.Warning => "warning-feedback",
        _ => "form-text text-muted"
    };

    /// <summary>
    /// Gets whether the input has prefix or suffix elements.
    /// </summary>
    private bool HasPrefixOrSuffix => PrefixIcon != null || !string.IsNullOrEmpty(PrefixText) || 
                                     SuffixIcon != null || !string.IsNullOrEmpty(SuffixText);

    /// <summary>
    /// Handles input value changes (oninput event).
    /// </summary>
    private async Task HandleInput(ChangeEventArgs e)
    {
        CurrentValue = e.Value?.ToString();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles input value changes (onchange event).
    /// </summary>
    private async Task HandleChange(ChangeEventArgs e)
    {
        CurrentValue = e.Value?.ToString();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles input focus events.
    /// </summary>
    private async Task HandleFocus(FocusEventArgs e)
    {
        if (OnFocus.HasDelegate)
            await OnFocus.InvokeAsync(e);
    }

    /// <summary>
    /// Handles input blur events.
    /// </summary>
    private async Task HandleBlur(FocusEventArgs e)
    {
        if (OnBlur.HasDelegate)
            await OnBlur.InvokeAsync(e);
    }

    /// <summary>
    /// Toggles password visibility between text and password input types.
    /// </summary>
    private async Task TogglePasswordVisibility()
    {
        if (Disabled || ReadOnly)
            return;

        IsPasswordVisible = !IsPasswordVisible;
        
        if (OnVisibilityToggled.HasDelegate)
            await OnVisibilityToggled.InvokeAsync(IsPasswordVisible);
    }
}