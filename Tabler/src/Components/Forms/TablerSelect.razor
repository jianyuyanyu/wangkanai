@* Copyright (c) 2014-2025 Sarin Na Wangkanai, All Rights Reserved. *@
@namespace Wangkanai.Tabler.Components
@inherits ComponentBase
@using Wangkanai.Tabler.Models
@using Microsoft.AspNetCore.Components.Web

<div class="@WrapperCssClass">
    @if (PrefixIcon != null || !string.IsNullOrEmpty(PrefixText))
    {
        <span class="input-group-text">
            @if (PrefixIcon != null)
            {
                @PrefixIcon
            }
            else if (!string.IsNullOrEmpty(PrefixText))
            {
                @PrefixText
            }
        </span>
    }

    <select @attributes="AllAttributes" 
            class="@SelectCssClass" 
            value="@CurrentValue"
            disabled="@Disabled"
            multiple="@Multiple"
            @onchange="HandleChange"
            @onfocus="HandleFocus"
            @onblur="HandleBlur">
        
        @if (!string.IsNullOrEmpty(Placeholder) && !Multiple)
        {
            <option value="" disabled="@(!AllowEmpty)" selected="@(string.IsNullOrEmpty(CurrentValue))">
                @Placeholder
            </option>
        }
        
        @if (ChildContent != null)
        {
            @ChildContent
        }
        else if (Options != null && Options.Any())
        {
            @foreach (var option in Options)
            {
                <option value="@option.Value" selected="@IsSelected(option.Value)" disabled="@option.Disabled">
                    @option.Text
                </option>
            }
        }
    </select>

    @if (SuffixIcon != null || !string.IsNullOrEmpty(SuffixText))
    {
        <span class="input-group-text">
            @if (SuffixIcon != null)
            {
                @SuffixIcon
            }
            else if (!string.IsNullOrEmpty(SuffixText))
            {
                @SuffixText
            }
        </span>
    }
</div>

@if (!string.IsNullOrEmpty(HelpText) || ValidationState != InputValidationState.None)
{
    <div class="@FeedbackCssClass">
        @if (ValidationState == InputValidationState.Invalid && !string.IsNullOrEmpty(ErrorMessage))
        {
            @ErrorMessage
        }
        else if (ValidationState == InputValidationState.Valid && !string.IsNullOrEmpty(SuccessMessage))
        {
            @SuccessMessage
        }
        else if (ValidationState == InputValidationState.Warning && !string.IsNullOrEmpty(WarningMessage))
        {
            @WarningMessage
        }
        else if (!string.IsNullOrEmpty(HelpText))
        {
            @HelpText
        }
    </div>
}

@code {
    /// <summary>
    /// The current value of the select.
    /// </summary>
    [Parameter] public string? Value { get; set; }

    /// <summary>
    /// Event callback fired when the select value changes.
    /// </summary>
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    /// Additional HTML attributes to be applied to the select element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Placeholder text to display when no option is selected.
    /// </summary>
    [Parameter] public string? Placeholder { get; set; }

    /// <summary>
    /// Whether to allow empty/null selection.
    /// </summary>
    [Parameter] public bool AllowEmpty { get; set; } = true;

    /// <summary>
    /// Whether the select is disabled.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    /// <summary>
    /// Whether to allow multiple selections.
    /// </summary>
    [Parameter] public bool Multiple { get; set; }

    /// <summary>
    /// The size of the select control.
    /// </summary>
    [Parameter] public InputSize Size { get; set; } = InputSize.Default;

    /// <summary>
    /// The validation state of the select.
    /// </summary>
    [Parameter] public InputValidationState ValidationState { get; set; } = InputValidationState.None;

    /// <summary>
    /// Help text to display below the select.
    /// </summary>
    [Parameter] public string? HelpText { get; set; }

    /// <summary>
    /// Error message to display when ValidationState is Invalid.
    /// </summary>
    [Parameter] public string? ErrorMessage { get; set; }

    /// <summary>
    /// Success message to display when ValidationState is Valid.
    /// </summary>
    [Parameter] public string? SuccessMessage { get; set; }

    /// <summary>
    /// Warning message to display when ValidationState is Warning.
    /// </summary>
    [Parameter] public string? WarningMessage { get; set; }

    /// <summary>
    /// Prefix icon content to display before the select.
    /// </summary>
    [Parameter] public RenderFragment? PrefixIcon { get; set; }

    /// <summary>
    /// Prefix text to display before the select.
    /// </summary>
    [Parameter] public string? PrefixText { get; set; }

    /// <summary>
    /// Suffix icon content to display after the select.
    /// </summary>
    [Parameter] public RenderFragment? SuffixIcon { get; set; }

    /// <summary>
    /// Suffix text to display after the select.
    /// </summary>
    [Parameter] public string? SuffixText { get; set; }

    /// <summary>
    /// Event callback fired when the select receives focus.
    /// </summary>
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }

    /// <summary>
    /// Event callback fired when the select loses focus.
    /// </summary>
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    /// <summary>
    /// Additional CSS classes to apply to the select wrapper.
    /// </summary>
    [Parameter] public string? AdditionalCssClass { get; set; }

    /// <summary>
    /// Collection of options to display in the select.
    /// </summary>
    [Parameter] public IEnumerable<SelectOption>? Options { get; set; }

    /// <summary>
    /// Child content for custom option rendering.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the current select value.
    /// </summary>
    protected string? CurrentValue
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                _ = ValueChanged.InvokeAsync(value);
            }
        }
    }

    /// <summary>
    /// Gets the attributes to apply to the select element, excluding class.
    /// </summary>
    private Dictionary<string, object> AllAttributes
    {
        get
        {
            var attributes = new Dictionary<string, object>();

            if (AdditionalAttributes != null)
            {
                foreach (var attr in AdditionalAttributes.Where(a => a.Key != "class"))
                {
                    attributes[attr.Key] = attr.Value;
                }
            }

            return attributes;
        }
    }

    /// <summary>
    /// Gets the CSS class for the select wrapper.
    /// </summary>
    private string WrapperCssClass
    {
        get
        {
            var classes = new List<string>();

            if (HasPrefixOrSuffix)
                classes.Add("input-group");

            if (!string.IsNullOrWhiteSpace(AdditionalCssClass))
            {
                foreach (var cssClass in AdditionalCssClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                {
                    classes.Add(cssClass);
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the select element.
    /// </summary>
    private string SelectCssClass
    {
        get
        {
            var classes = new List<string> { "form-select" };

            // Size classes
            switch (Size)
            {
                case InputSize.Small:
                    classes.Add("form-select-sm");
                    break;
                case InputSize.Large:
                    classes.Add("form-select-lg");
                    break;
            }

            // Validation state classes
            switch (ValidationState)
            {
                case InputValidationState.Valid:
                    classes.Add("is-valid");
                    break;
                case InputValidationState.Invalid:
                    classes.Add("is-invalid");
                    break;
                case InputValidationState.Warning:
                    classes.Add("is-warning");
                    break;
            }

            // Add any additional classes from AdditionalAttributes
            if (AdditionalAttributes?.ContainsKey("class") == true)
            {
                var additionalClass = AdditionalAttributes["class"]?.ToString();
                if (!string.IsNullOrWhiteSpace(additionalClass))
                {
                    foreach (var cssClass in additionalClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                    {
                        classes.Add(cssClass);
                    }
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the feedback message.
    /// </summary>
    private string FeedbackCssClass => ValidationState switch
    {
        InputValidationState.Valid => "valid-feedback",
        InputValidationState.Invalid => "invalid-feedback",
        InputValidationState.Warning => "warning-feedback",
        _ => "form-text text-muted"
    };

    /// <summary>
    /// Gets whether the select has prefix or suffix elements.
    /// </summary>
    private bool HasPrefixOrSuffix => PrefixIcon != null || !string.IsNullOrEmpty(PrefixText) || 
                                     SuffixIcon != null || !string.IsNullOrEmpty(SuffixText);

    /// <summary>
    /// Determines if an option value is currently selected.
    /// </summary>
    /// <param name="optionValue">The option value to check</param>
    /// <returns>True if the option is selected</returns>
    private bool IsSelected(string? optionValue)
    {
        return string.Equals(CurrentValue, optionValue, StringComparison.Ordinal);
    }

    /// <summary>
    /// Handles select value changes.
    /// </summary>
    private async Task HandleChange(ChangeEventArgs e)
    {
        CurrentValue = e.Value?.ToString();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles select focus events.
    /// </summary>
    private async Task HandleFocus(FocusEventArgs e)
    {
        if (OnFocus.HasDelegate)
            await OnFocus.InvokeAsync(e);
    }

    /// <summary>
    /// Handles select blur events.
    /// </summary>
    private async Task HandleBlur(FocusEventArgs e)
    {
        if (OnBlur.HasDelegate)
            await OnBlur.InvokeAsync(e);
    }
}