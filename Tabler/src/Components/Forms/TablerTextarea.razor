@* Copyright (c) 2014-2025 Sarin Na Wangkanai, All Rights Reserved. *@
@namespace Wangkanai.Tabler.Components
@inherits ComponentBase
@using Wangkanai.Tabler.Models
@using Microsoft.AspNetCore.Components.Web

<div class="@WrapperCssClass">
    @if (PrefixIcon != null || !string.IsNullOrEmpty(PrefixText))
    {
        <span class="input-group-text">
            @if (PrefixIcon != null)
            {
                @PrefixIcon
            }
            else if (!string.IsNullOrEmpty(PrefixText))
            {
                @PrefixText
            }
        </span>
    }

    <textarea @attributes="AllAttributes" 
              class="@TextareaCssClass" 
              placeholder="@Placeholder"
              disabled="@Disabled"
              readonly="@ReadOnly"
              rows="@Rows"
              cols="@Cols"
              maxlength="@(MaxLength > 0 ? MaxLength : null)"
              @oninput="HandleInput"
              @onchange="HandleChange"
              @onfocus="HandleFocus"
              @onblur="HandleBlur">@CurrentValue</textarea>

    @if (SuffixIcon != null || !string.IsNullOrEmpty(SuffixText))
    {
        <span class="input-group-text">
            @if (SuffixIcon != null)
            {
                @SuffixIcon
            }
            else if (!string.IsNullOrEmpty(SuffixText))
            {
                @SuffixText
            }
        </span>
    }
</div>

@if (ShowCharacterCount || !string.IsNullOrEmpty(HelpText) || ValidationState != InputValidationState.None)
{
    <div class="@FeedbackWrapperCssClass">
        @if (ShowCharacterCount)
        {
            <small class="@CharacterCountCssClass">
                @GetCharacterCountText()
            </small>
        }
        
        @if (ValidationState == InputValidationState.Invalid && !string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="@FeedbackCssClass">
                @ErrorMessage
            </div>
        }
        else if (ValidationState == InputValidationState.Valid && !string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="@FeedbackCssClass">
                @SuccessMessage
            </div>
        }
        else if (ValidationState == InputValidationState.Warning && !string.IsNullOrEmpty(WarningMessage))
        {
            <div class="@FeedbackCssClass">
                @WarningMessage
            </div>
        }
        else if (!string.IsNullOrEmpty(HelpText))
        {
            <div class="@FeedbackCssClass">
                @HelpText
            </div>
        }
    </div>
}

@code {
    /// <summary>
    /// The current value of the textarea.
    /// </summary>
    [Parameter] public string? Value { get; set; }

    /// <summary>
    /// Event callback fired when the textarea value changes.
    /// </summary>
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    /// Additional HTML attributes to be applied to the textarea element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Placeholder text to display when the textarea is empty.
    /// </summary>
    [Parameter] public string? Placeholder { get; set; }

    /// <summary>
    /// Whether the textarea is disabled.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    /// <summary>
    /// Whether the textarea is read-only.
    /// </summary>
    [Parameter] public bool ReadOnly { get; set; }

    /// <summary>
    /// The number of visible text lines for the control.
    /// </summary>
    [Parameter] public int Rows { get; set; } = 3;

    /// <summary>
    /// The visible width of the text control, in average character widths.
    /// </summary>
    [Parameter] public int Cols { get; set; } = 0;

    /// <summary>
    /// The maximum number of characters allowed in the textarea.
    /// </summary>
    [Parameter] public int MaxLength { get; set; } = 0;

    /// <summary>
    /// Whether to automatically resize the textarea based on content.
    /// </summary>
    [Parameter] public bool AutoResize { get; set; }

    /// <summary>
    /// Whether to show character count below the textarea.
    /// </summary>
    [Parameter] public bool ShowCharacterCount { get; set; }

    /// <summary>
    /// The size of the textarea control.
    /// </summary>
    [Parameter] public InputSize Size { get; set; } = InputSize.Default;

    /// <summary>
    /// The validation state of the textarea.
    /// </summary>
    [Parameter] public InputValidationState ValidationState { get; set; } = InputValidationState.None;

    /// <summary>
    /// Help text to display below the textarea.
    /// </summary>
    [Parameter] public string? HelpText { get; set; }

    /// <summary>
    /// Error message to display when ValidationState is Invalid.
    /// </summary>
    [Parameter] public string? ErrorMessage { get; set; }

    /// <summary>
    /// Success message to display when ValidationState is Valid.
    /// </summary>
    [Parameter] public string? SuccessMessage { get; set; }

    /// <summary>
    /// Warning message to display when ValidationState is Warning.
    /// </summary>
    [Parameter] public string? WarningMessage { get; set; }

    /// <summary>
    /// Prefix icon content to display before the textarea.
    /// </summary>
    [Parameter] public RenderFragment? PrefixIcon { get; set; }

    /// <summary>
    /// Prefix text to display before the textarea.
    /// </summary>
    [Parameter] public string? PrefixText { get; set; }

    /// <summary>
    /// Suffix icon content to display after the textarea.
    /// </summary>
    [Parameter] public RenderFragment? SuffixIcon { get; set; }

    /// <summary>
    /// Suffix text to display after the textarea.
    /// </summary>
    [Parameter] public string? SuffixText { get; set; }

    /// <summary>
    /// Event callback fired when the textarea receives focus.
    /// </summary>
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }

    /// <summary>
    /// Event callback fired when the textarea loses focus.
    /// </summary>
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    /// <summary>
    /// Additional CSS classes to apply to the textarea wrapper.
    /// </summary>
    [Parameter] public string? AdditionalCssClass { get; set; }

    /// <summary>
    /// Gets or sets the current textarea value.
    /// </summary>
    protected string? CurrentValue
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                _ = ValueChanged.InvokeAsync(value);
            }
        }
    }

    /// <summary>
    /// Gets the attributes to apply to the textarea element, excluding class.
    /// </summary>
    private Dictionary<string, object> AllAttributes
    {
        get
        {
            var attributes = new Dictionary<string, object>();

            if (AdditionalAttributes != null)
            {
                foreach (var attr in AdditionalAttributes.Where(a => a.Key != "class"))
                {
                    attributes[attr.Key] = attr.Value;
                }
            }

            // Add auto-resize data attribute if enabled
            if (AutoResize)
            {
                attributes["data-auto-resize"] = "true";
            }

            return attributes;
        }
    }

    /// <summary>
    /// Gets the CSS class for the textarea wrapper.
    /// </summary>
    private string WrapperCssClass
    {
        get
        {
            var classes = new List<string>();

            if (HasPrefixOrSuffix)
                classes.Add("input-group");

            if (!string.IsNullOrWhiteSpace(AdditionalCssClass))
            {
                foreach (var cssClass in AdditionalCssClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                {
                    classes.Add(cssClass);
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the textarea element.
    /// </summary>
    private string TextareaCssClass
    {
        get
        {
            var classes = new List<string> { "form-control" };

            // Size classes
            switch (Size)
            {
                case InputSize.Small:
                    classes.Add("form-control-sm");
                    break;
                case InputSize.Large:
                    classes.Add("form-control-lg");
                    break;
            }

            // Validation state classes
            switch (ValidationState)
            {
                case InputValidationState.Valid:
                    classes.Add("is-valid");
                    break;
                case InputValidationState.Invalid:
                    classes.Add("is-invalid");
                    break;
                case InputValidationState.Warning:
                    classes.Add("is-warning");
                    break;
            }

            // Auto-resize class
            if (AutoResize)
            {
                classes.Add("auto-resize");
            }

            // Add any additional classes from AdditionalAttributes
            if (AdditionalAttributes?.ContainsKey("class") == true)
            {
                var additionalClass = AdditionalAttributes["class"]?.ToString();
                if (!string.IsNullOrWhiteSpace(additionalClass))
                {
                    foreach (var cssClass in additionalClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                    {
                        classes.Add(cssClass);
                    }
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the feedback wrapper.
    /// </summary>
    private string FeedbackWrapperCssClass
    {
        get
        {
            var classes = new List<string>();

            if (ShowCharacterCount)
            {
                classes.Add("d-flex");
                if (ValidationState != InputValidationState.None || !string.IsNullOrEmpty(HelpText))
                {
                    classes.Add("justify-content-between");
                    classes.Add("align-items-center");
                }
                else
                {
                    classes.Add("justify-content-end");
                }
            }

            return string.Join(" ", classes).Trim();
        }
    }

    /// <summary>
    /// Gets the CSS class for the feedback message.
    /// </summary>
    private string FeedbackCssClass => ValidationState switch
    {
        InputValidationState.Valid => "valid-feedback",
        InputValidationState.Invalid => "invalid-feedback",
        InputValidationState.Warning => "warning-feedback",
        _ => "form-text text-muted"
    };

    /// <summary>
    /// Gets the CSS class for the character count display.
    /// </summary>
    private string CharacterCountCssClass
    {
        get
        {
            var classes = new List<string> { "form-text", "text-muted" };

            if (MaxLength > 0 && CurrentValue?.Length >= MaxLength)
            {
                classes.Add("text-danger");
            }
            else if (MaxLength > 0 && CurrentValue?.Length >= MaxLength * 0.8)
            {
                classes.Add("text-warning");
            }

            return string.Join(" ", classes);
        }
    }

    /// <summary>
    /// Gets whether the textarea has prefix or suffix elements.
    /// </summary>
    private bool HasPrefixOrSuffix => PrefixIcon != null || !string.IsNullOrEmpty(PrefixText) || 
                                     SuffixIcon != null || !string.IsNullOrEmpty(SuffixText);

    /// <summary>
    /// Gets the character count text to display.
    /// </summary>
    private string GetCharacterCountText()
    {
        var currentLength = CurrentValue?.Length ?? 0;
        
        if (MaxLength > 0)
        {
            return $"{currentLength}/{MaxLength}";
        }
        
        return $"{currentLength} characters";
    }

    /// <summary>
    /// Handles textarea value changes (oninput event).
    /// </summary>
    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString();
        
        // Enforce max length if specified
        if (MaxLength > 0 && newValue?.Length > MaxLength)
        {
            newValue = newValue.Substring(0, MaxLength);
        }
        
        CurrentValue = newValue;
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles textarea value changes (onchange event).
    /// </summary>
    private async Task HandleChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString();
        
        // Enforce max length if specified
        if (MaxLength > 0 && newValue?.Length > MaxLength)
        {
            newValue = newValue.Substring(0, MaxLength);
        }
        
        CurrentValue = newValue;
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles textarea focus events.
    /// </summary>
    private async Task HandleFocus(FocusEventArgs e)
    {
        if (OnFocus.HasDelegate)
            await OnFocus.InvokeAsync(e);
    }

    /// <summary>
    /// Handles textarea blur events.
    /// </summary>
    private async Task HandleBlur(FocusEventArgs e)
    {
        if (OnBlur.HasDelegate)
            await OnBlur.InvokeAsync(e);
    }

    /// <summary>
    /// Called after the component has been rendered.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Auto-resize functionality would be implemented via JavaScript interop
        // For now, we set the data attribute for potential JS integration
        await base.OnAfterRenderAsync(firstRender);
    }
}