@namespace Wangkanai.Tabler.Components.Base
@using Wangkanai.Tabler.Models
@inherits ComponentBase

<svg class="@CssClass"
     width="@SvgSize"
     height="@SvgSize"
     viewBox="0 0 24 24"
     stroke-width="@StrokeWidth"
     stroke="currentColor"
     fill="none"
     stroke-linecap="round"
     stroke-linejoin="round"
     @attributes="AdditionalAttributes">
    
    @if (ChildContent != null)
    {
        @ChildContent
    }
    else if (!string.IsNullOrEmpty(Name))
    {
        @* Render built-in Tabler icon based on name *@
        @GetIconPath(Name)
    }
</svg>

@code {
    /// <summary>
    /// Custom icon content (SVG path elements).
    /// Takes precedence over the Name parameter.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// The name of the Tabler icon to display.
    /// Only used if ChildContent is not provided.
    /// </summary>
    [Parameter] public string? Name { get; set; }
    
    /// <summary>
    /// The size of the icon. Default is Default (16px).
    /// </summary>
    [Parameter] public IconSize Size { get; set; } = IconSize.Default;
    
    /// <summary>
    /// The stroke width for the icon. Default is 2.
    /// </summary>
    [Parameter] public double StrokeWidth { get; set; } = 2.0;
    
    /// <summary>
    /// Additional CSS classes to apply to the icon.
    /// </summary>
    [Parameter] public string? AdditionalCssClass { get; set; }
    
    /// <summary>
    /// Additional attributes to be applied to the SVG element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)] 
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    
    /// <summary>
    /// Gets the computed CSS class string for the icon.
    /// </summary>
    private string CssClass => string.Join(" ", GetCssClasses()).Trim();
    
    /// <summary>
    /// Gets the SVG size based on the Size parameter.
    /// </summary>
    private int SvgSize => Size switch
    {
        IconSize.ExtraSmall => 12,
        IconSize.Small => 14,
        IconSize.Medium => 18,
        IconSize.Large => 20,
        IconSize.ExtraLarge => 24,
        _ => 16 // Default size
    };
    
    /// <summary>
    /// Generates the CSS classes based on component parameters.
    /// </summary>
    private IEnumerable<string> GetCssClasses()
    {
        yield return "icon";
        yield return "icon-tabler";
        
        // Apply size classes (except for default)
        switch (Size)
        {
            case IconSize.ExtraSmall:
                yield return "icon-xs";
                break;
            case IconSize.Small:
                yield return "icon-sm";
                break;
            case IconSize.Medium:
                yield return "icon-md";
                break;
            case IconSize.Large:
                yield return "icon-lg";
                break;
            case IconSize.ExtraLarge:
                yield return "icon-xl";
                break;
        }
        
        // Add custom CSS classes if provided
        if (!string.IsNullOrEmpty(AdditionalCssClass))
        {
            foreach (var cssClass in AdditionalCssClass.Split(' ', StringSplitOptions.RemoveEmptyEntries))
            {
                yield return cssClass;
            }
        }
    }
    
    /// <summary>
    /// Gets the SVG path content for a named Tabler icon.
    /// Returns a basic placeholder for common icons.
    /// </summary>
    private RenderFragment GetIconPath(string iconName) => builder =>
    {
        // This is a simplified implementation with a few common icons
        // In a full implementation, you would load from Tabler icon library
        var pathData = iconName.ToLowerInvariant() switch
        {
            "home" => "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6",
            "user" => "M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2m8-10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z",
            "settings" => "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z M15 12a3 3 0 11-6 0 3 3 0 016 0z",
            "plus" => "M12 5v14m-7-7h14",
            "minus" => "M5 12h14",
            "x" => "M18 6L6 18M6 6l12 12",
            "check" => "M20 6L9 17l-5-5",
            "chevron-down" => "M6 9l6 6 6-6",
            "chevron-up" => "M18 15l-6-6-6 6",
            "chevron-left" => "M15 18l-6-6 6-6",
            "chevron-right" => "M9 18l6-6-6-6",
            "search" => "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z",
            "menu" => "M4 6h16M4 12h16M4 18h16",
            "dots" => "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0",
            _ => "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" // Default dot icon
        };
        
        builder.OpenElement(0, "path");
        builder.AddAttribute(1, "d", pathData);
        builder.CloseElement();
    };
}